{"version":3,"sources":["Chart.js","Upload.js","App.js","index.js"],"names":["jsonData","title","dataKey","color","useState","data","setData","useEffect","length","map","d","m","moment","date","console","log","toDate","name","toString","value","format","timer","setTimeout","push","lastitem","add","values","filter","includes","avgMonth","reduce","a","b","avgAll","ratio","val","Math","random","round","randomData","clearTimeout","options","text","left","tooltip","trigger","show","formatter","params","Date","getDate","getMonth","getFullYear","xAxis","type","splitLine","yAxis","boundaryGap","series","showSymbol","lineStyle","years","dataSource","columns","dataIndex","key","mnt","y","c","ind","findIndex","month","sourceVal","Number","toLocaleString","style","padding","display","overflow","gap","justifyContent","width","paddingBottom","Object","entries","index","year","total","border","borderRadius","option","pagination","json","window","localStorage","getItem","JSON","parse","onChange","e","target","files","reader","FileReader","onload","source","result","workbook","xlsx","sheetName","SheetNames","worksheet","Sheets","sheet_to_json","row","Income","keys","income","expanditure","k","sort","setItem","stringify","readAsArrayBuffer","App","className","Upload","defaultActiveKey","TabPane","tab","Chart","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.23730a8c.chunk.js","sourcesContent":["import ReactECharts from \"echarts-for-react\";\nimport moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport {Table} from \"antd\";\n\nexport default function({ jsonData = [], title = 'Income Forcasting', dataKey = 'income', color=\"green\" }) {\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        if (!jsonData.length) return;\n        setData(\n            jsonData.map((d) => {\n                const m = moment(d.date);\n                console.log(m.toDate());\n                return {\n                    name: m.toDate().toString(),\n                    value: [m.format(\"YYYY/M/D\"), d[dataKey]]\n                };\n            })\n        );\n    }, [jsonData]);\n\n    useEffect(() => {\n        if (!data.length) return;\n        var timer = setTimeout(function() {\n            data.push(randomData());\n            setData([...data]);\n        }, 2000);\n        return () => clearTimeout(timer);\n    }, [data]);\n\n    function randomData() {\n        var lastitem = data[data.length - 1];\n        var m = moment(lastitem.name).add(1, \"months\");\n        var values = data.filter(d => d.name.includes(m.format('MMM'))).map(d=> d.value[1]);\n        var avgMonth = values.reduce(function(a, b) { return a + b; }, 0)/values.length;\n        var avgAll = data.map(d=> d.value[1]).reduce(function(a, b) { return a + b; }, 0)/data.length;\n        var ratio = 2;\n\n        // var val = (sum/values.length) * Math.max(Math.random()*2, 1);\n        var val = (avgMonth*ratio*(Math.random()+1) + avgAll)/(ratio+1);\n        return {\n            name: m.toDate().toString(),\n            value: [m.format(\"YYYY/M/D\"), Math.round(val)]\n        };\n    }\n\n    let options = {\n        title: {\n            text: title,\n            left: 'center'\n        },\n        tooltip: {\n            trigger: \"axis\",\n            show: true,\n            formatter: function(params) {\n                params = params[0];\n                var date = new Date(params.name);\n                return (\n                    date.getDate() +\n                    \"/\" +\n                    (date.getMonth() + 1) +\n                    \"/\" +\n                    date.getFullYear() +\n                    \" : \" +\n                    params.value[1]\n                );\n            },\n        },\n        xAxis: {\n            type: \"time\",\n            splitLine: {\n                show: false\n            }\n        },\n        yAxis: {\n            type: \"value\",\n            boundaryGap: [0, \"100%\"],\n            splitLine: {\n                show: false\n            }\n        },\n        series: [{\n            name: \"Amount\",\n            type: \"line\",\n            showSymbol: false,\n            data: data,\n            lineStyle: {color}\n        }]\n    };\n\n    var years = {};\n    var dataSource = [];\n    var columns = [{title: 'Month', dataIndex: 'month', key: 'month'}];\n    for(var d of data){\n        var mnt = moment(d.name);\n        var y = mnt.format('YYYY');\n        var m = mnt.format('MMMM');\n        var val = d.value[1];\n        if(!years[y]) years[y] = 0;\n        years[y] += val;\n        if(!columns.filter(c => c.title==y).length) columns.push({title: y, dataIndex: y, key: y});\n        var ind = dataSource.findIndex(d => d.month == m);\n        var sourceVal = 'RM'+ Number(val).toLocaleString();\n        if(ind>-1) dataSource[ind][y] = sourceVal;\n        else dataSource.push({month: m, [y]: sourceVal });\n    }   \n\n    return (<div style={{padding: 20}}>\n        <div style={{display: 'flex', overflow: 'auto', gap: 20, justifyContent: 'center', width: '100%', paddingBottom: 30}}>\n            {Object.entries(years).map(([year, total], index)=>{\n                return <div key={index} style={{border: '1px solid '+ color, color, padding: 10, borderRadius: 8, width: 200}}>\n                    <h4>Total {title} ({year})</h4>\n                    <div>RM{Number(total).toLocaleString()}</div>\n                </div>\n            })}\n        </div>\n        <ReactECharts option={options} /> \n        <Table dataSource={dataSource} columns={columns} pagination={false} />\n      </div>\n    );\n}","import moment from \"moment\";\nimport { useEffect } from \"react\";\nimport * as xlsx from \"xlsx\";\n\nexport default function ({ setData }) {\n  useEffect(() => {\n    var json = window.localStorage.getItem('xlsx');\n    if (!json) return;\n    setData(JSON.parse(json));\n  }, []);\n\n\n  const onUpload = (e) => {\n    if (!e.target.files) return;\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const source = e.target.result;\n      const workbook = xlsx.read(source, { type: \"array\" });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const json = xlsx.utils.sheet_to_json(worksheet);\n      var data = [];\n      var years = {};\n      for (var row of json) {\n        if (row.Income == \"Month\") {\n          for (var k in row) {\n            if (k == \"Income\" || k == \"Expenditure\") continue;\n            var year = row[k];\n            if (!years[year]) years[year] = [];\n            years[year].push(k);\n          }\n          continue;\n        }\n        for (var year in years) {\n          var keys = years[year];\n          data.push({\n            date: row.Income + \"-\" + year,\n            income: row[keys[0]],\n            expanditure: row[keys[1]]\n          });\n        }\n      }\n      data.sort(function (a, b) {\n        return moment(a.date) - moment(b.date);\n      });\n\n      window.localStorage.setItem('xlsx', JSON.stringify(data));\n      setData && setData(data);\n    };\n\n    reader.readAsArrayBuffer(e.target.files[0]);\n  };\n  return (\n    <div>\n      <input type=\"file\" onChange={onUpload} />\n    </div>\n  );\n}\n","import Chart from \"./Chart\";\nimport Upload from \"./Upload\";\nimport \"./styles.css\";\nimport { useState } from \"react\";\nimport {Tabs} from \"antd\";\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  return (\n    <div className=\"App\">\n      <Upload setData={setData} />\n      <Tabs defaultActiveKey=\"1\">\n        <Tabs.TabPane tab=\"Income\" key=\"1\">\n        <Chart jsonData={data} title=\"Income Forcasting\" dataKey=\"income\" color=\"green\" />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab=\"Expenditure\" key=\"2\">\n        <Chart jsonData={data} title=\"Expenditure Forcasting\" dataKey=\"expanditure\" color=\"red\" />\n        </Tabs.TabPane>\n      </Tabs>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}